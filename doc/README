
= boscli files =
In order to define boscli commands that only use normal shell commands but with concrete parameter or using boscli defined types, we can use boscli files instead of define a boscli python extensions.

This files names must end with the boscli extension, for example cmdsystem.boscli. It contains one or more command definitios in a .ini format

Example:
======================================
[cmd]
cmd=sys show so version
shell=cat /etc/lsb_release
doc=Show SO release 

[cmd]
cmd=sys show kernel version
shell=uname -r
doc=Show kernel version

[cmd]
cmd=sys htop
shell=htop
doc=Interactive process viewer
interactive=yes
priv=ENABLE
======================================

Each comamnd is defined in its own command section ([cmd]). In the command secion allways must define the following keywords:
 * 'cmd' The comand name used at the boscli
 * 'shell' The line to execute at shell prompt (it can use pipes and redirections)
 * 'doc' The short doc showed when help is requested for this command at boscli


There are optional keywords like:
 * 'priv'
 * 'interactive'

'priv' define the minimal privileges level required for use the comand. The accepted values are NONE, ENABLE, MANUF. The default value is NONE.

'interactive' is a boolean var that define how the shell command should be executed. The values are:
 * 'iteractive = yes' The shell command is executed using boscliutils.InteractiveCommand, so the boscli execute the command without interfering in the standard input/ouput of the subprocess. This mode is interesting for interactive commands as top, or full term editors, and so on
 * 'iteractive = no' The shell command is executed using boscliutils.BatchCommand. In this case the subprocess is supposed to work by line so the boscli will interfer on the output, for example for filter (using begin, include, exclude boscli filters). This is the '''default'''


== boscli files. Commands with parameters ==
The commands defined at boscli files can use parameters using the boscli defined types.
For example if we have defined a IPSHAPER type for the boscli (using a python boscli extension) we can use this type in our commands definition:

=============================================
[cmd]
cmd=shaper dumptraff host:IPSHAPER
doc=Show host traffic real time
shell=tshark -i any -f \"host ${host}\"
=============================================

The parameter is defined using a lowercase parameter name and the uppercase type name separated by ':'.
In the example we define a parameter 'host' using the type 'IPSHAPER' that is defined in a extension. We can use the parameter value, using ${<paramname>} at the shell line.
So in the above example the ${host} will be substituted by the host value introduced by the user.


User input: shaper dumptraff laptop
Shell command executed: tshark -i any -f "host laptop"


Of course, we can use all the parameters we need, using our type definitions, or the boscli included type definitions (as INT, IP, HOST, etc)

==========================================================
[cmd]
cmd=shaper dumptraff host:IPSHAPER port:INT
doc=Show host/port traffic real time
shell=tshark -i any -f \"host ${host} and port ${port}\"
priv = MANUF

[cmd]
cmd=shaper tcview iface:NETIF
doc=Show tc simple tc throughtput
shell=/opt/bos/bin/tc-viewer --zero --iface ${iface} --unit=kbit
priv = MANUF
==========================================================
